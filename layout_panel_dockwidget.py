# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LayoutPanelDockWidget
                                 A QGIS plugin
 Add a panel to manage layouts without blocking the main interface
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2022-02-09
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Atelier JBP
        email                : jbpeter@outlook.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import re

from qgis.PyQt import QtGui, QtWidgets, uic, QtXml
from qgis.PyQt.QtCore import pyqtSignal, Qt, QUrl, QDir, QFileInfo, QFileSystemWatcher
from qgis.core import QgsProject, QgsPrintLayout, QgsLayoutExporter, QgsSettings, QgsReadWriteContext, QgsApplication, QgsUnitTypes

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'layout_panel_dockwidget_base.ui'))


class LayoutPanelDockWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    def __init__(self, iface, parent=None):
        super(LayoutPanelDockWidget, self).__init__(parent)
        self.setupUi(self)

        self.iface = iface

        self.layoutNameRename = None

        self.pbCreateLayout.clicked.connect(self.createNewLayout)
        self.pbDeleteLayout.clicked.connect(self.removeSelectedLayouts)
        self.listWidget.itemDoubleClicked.connect(self.openLayoutEditor)
        self.mLineEdit.valueChanged.connect(self.updateLayoutWidgetList)

        QgsProject.instance().readProject.connect(self.updateProjectInstance)
        QgsProject.instance().cleared.connect(self.updateProjectInstance)

        QgsProject.instance().layoutManager().layoutAdded.connect(self.updateLayoutWidgetList)
        QgsProject.instance().layoutManager().layoutRemoved.connect(self.updateLayoutWidgetList)
        QgsProject.instance().layoutManager().layoutRenamed.connect(self.updateLayoutWidgetList)

        self.listWidget.setContextMenuPolicy(Qt.CustomContextMenu)
        self.listWidget.customContextMenuRequested.connect(self.openContextMenu)
        self.listWidget.itemDelegate().closeEditor.connect(self.renameLayoutClosedEditor)

        # Wath template project folder for changes
        projectTemplateDir = QDir(QgsApplication.qgisSettingsDirPath())
        projectTemplateDir.cd('composer_templates')
        self.watchFolder = QFileSystemWatcher([projectTemplateDir.absolutePath()])
        self.watchFolder.directoryChanged.connect(self.updateTemplateMenu)
        self.watchFolder.fileChanged.connect(self.updateTemplateMenu)

        self.updateProjectInstance()
        self.updateTemplateMenu()
        self.updateLayoutWidgetList()


    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()


    def updateProjectInstance(self):
        self.mLineEdit.clearValue()
        self.projectInstance = QgsProject.instance()
        self.projectLayoutManager = self.projectInstance.layoutManager()
        self.updateLayoutWidgetList()


    def updateLayoutWidgetList(self): # Regenerate the list of layouts
        layoutlist = self.projectLayoutManager.layouts()
        self.listWidget.clear()
        searchvalue = self.mLineEdit.value().replace("*", r"\*").replace("+", r"\+").replace("(", r"\(").replace(")",r"\)").replace("?", r"\?").replace("[", r"\[").replace("]", r"\]")
        for layout in layoutlist:
            layout.pageCollection().changed.connect(self.updateLayoutWidgetList) # necessary to ensure that tooltips are updated when layout format or page count changes
            match = bool(re.search(searchvalue,layout.name(), re.IGNORECASE))
            if match:
                layout = self.projectLayoutManager.layoutByName(layout.name())
                LayoutPageCollection = layout.pageCollection()
                pageCount = LayoutPageCollection.pageCount()
                if LayoutPageCollection.hasUniformPageSizes():
                    pageSize = LayoutPageCollection.maximumPageSize()
                    units = QgsUnitTypes.encodeUnit(layout.units())
                    pageSizeTooltip = f'{pageSize.width()}x{pageSize.height()} {units}'
                else:
                    pageSizeTooltip = 'variable'

                item = QtWidgets.QListWidgetItem()
                item.setText(layout.name())
                item.setIcon(QtGui.QIcon(':/plugins/layout_panel/icons/mIconLayout.svg'))
                item.setFlags(item.flags() | Qt.ItemIsEditable)
                item.setToolTip(f'Page count: {pageCount} <br> Page Size: {pageSizeTooltip}')
                self.listWidget.addItem(item)

    def updateTemplateMenu(self): # Generate the template menu
        projectTemplateDir = QDir(QgsApplication.qgisSettingsDirPath())
        projectTemplateDir.cd('composer_templates')
        projectTemplateDir.setFilter(QDir.Files)
        projectTemplateDir.setNameFilters(["*.qpt", "*.QPT"])
        projectTemplateDir.setSorting(QDir.Time)
        layoutTemplateList = []
        for template in projectTemplateDir.entryList():
            layoutTemplateList.append(projectTemplateDir.filePath(template))

        menu = QtWidgets.QMenu()
        if not layoutTemplateList:
            layoutTemplateAction = menu.addAction(QtGui.QIcon(":/plugins/layout_panel/icons/mActionNewLayout.svg"),'Template folder is empty')
            layoutTemplateAction.setEnabled(False)
        actions = []
        for layoutTemplatePath in layoutTemplateList:
            layoutTemplateAction = QtWidgets.QAction(QFileInfo(layoutTemplatePath).baseName(), self)
            layoutTemplateAction.setIcon(QtGui.QIcon(":/plugins/layout_panel/icons/mActionNewLayout.svg"))
            layoutTemplateAction.setData(["layoutTemplateAction",layoutTemplatePath])
            actions.append(layoutTemplateAction)
        menu.addActions(actions)
        menu.addSeparator()
        selectTemplateAction = menu.addAction("Choose Another Template File...")
        selectTemplateAction.setData(["selectTemplateAction", projectTemplateDir.absolutePath()])
        openTemplateFolderAction = menu.addAction(QtGui.QIcon(":/plugins/layout_panel/icons/mIconFolder.svg"),"Open Template Folder")
        openTemplateFolderAction.setData(["openTemplateFolderAction",projectTemplateDir.absolutePath()])
        self.tbTemplateMenu.setMenu(menu)
        menu.triggered.connect(self.templateMenuTriggered)


    def templateMenuTriggered(self,layoutTemplateAction): # Called when action in template menu is triggered
        if layoutTemplateAction.data()[0] == "openTemplateFolderAction" :
            QtGui.QDesktopServices.openUrl(QUrl.fromLocalFile(layoutTemplateAction.data()[1]))
        elif layoutTemplateAction.data()[0] == "selectTemplateAction":
            fname = QtWidgets.QFileDialog.getOpenFileName(self, 'Choose a template to create a new layout',layoutTemplateAction.data()[1],'Layout templates (*.qpt *.QPT)')
            if fname[0] != '':
                self.createLayoutFromTemplate(fname[0])
        elif layoutTemplateAction.data()[0] == "layoutTemplateAction":
            self.createLayoutFromTemplate(layoutTemplateAction.data()[1])


    def createLayoutFromTemplate(self, layoutTemplatePath): # Create a new layout based on a template file
        document = QtXml.QDomDocument()
        with open(layoutTemplatePath) as file:
            content = file.read()
        document.setContent(content)
        templateName = QFileInfo(layoutTemplatePath).baseName()
        iterator = 1
        while True:
            if self.projectLayoutManager.layoutByName(templateName + ' ' + str(iterator)) is None :
                layout = QgsPrintLayout(self.projectInstance)
                layoutName = templateName + ' ' + str(iterator)
                layout.loadFromTemplate(document, QgsReadWriteContext())
                layout.setName(layoutName)
                self.projectLayoutManager.addLayout(layout)
                return
            iterator = iterator + 1


    def openContextMenu(self, position): # Create the contextual menu
        selectedLayouts = self.listWidget.selectedItems()
        if len(selectedLayouts)==0: #Context menu if no layout is selected
            menu = QtWidgets.QMenu()
            newLayoutAction = menu.addAction(QtGui.QIcon(":/plugins/layout_panel/icons/mActionNewLayout.svg"), "New Print Layout")
            menu.addSeparator()
            exportMenu = menu.addMenu("Export All Layouts as...")
            exportPDFAction = exportMenu.addAction(QtGui.QIcon(":/plugins/layout_panel/icons/mActionSaveAsPDF.svg"),"Export as PDF")
            exportImageAction = exportMenu.addAction(QtGui.QIcon(":/plugins/layout_panel/icons/mActionSaveMapAsImage.svg"),"Export as Image")
            exportSvgAction = exportMenu.addAction(QtGui.QIcon(":/plugins/layout_panel/icons/mActionSaveAsSVG.svg"),"Export as SVG")
            action = menu.exec_(self.listWidget.mapToGlobal(position))
            if action == newLayoutAction: self.createNewLayout()
            elif action == exportPDFAction: self.exportLayoutPDF()
            elif action == exportImageAction:self.exportLayoutImage()
            elif action == exportSvgAction:self.exportLayoutSvg()

        elif len(selectedLayouts)==1: #Context menu if only one layout is selected
            menu = QtWidgets.QMenu()
            openAction = menu.addAction(QtGui.QIcon(":/plugins/layout_panel/icons/mIconLayout.svg"),"Open Layout")
            removeAction = menu.addAction(QtGui.QIcon(":/plugins/layout_panel/icons/mActionDeleteSelected.svg"),"Remove Layout...")
            duplicateAction = menu.addAction(QtGui.QIcon(":/plugins/layout_panel/icons/mActionDuplicateLayout.svg"), "Duplicate Layout")
            renameAction = menu.addAction(QtGui.QIcon(""),"Rename Layout")
            menu.addSeparator()
            saveAsTemplateAction = menu.addAction(QtGui.QIcon(""), "Save as Template...")
            menu.addSeparator()
            exportMenu=menu.addMenu("Export Layout as...")
            exportPDFAction = exportMenu.addAction(QtGui.QIcon(":/plugins/layout_panel/icons/mActionSaveAsPDF.svg"),"Export as PDF")
            exportImageAction = exportMenu.addAction(QtGui.QIcon(":/plugins/layout_panel/icons/mActionSaveMapAsImage.svg"), "Export as Image")
            exportSvgAction = exportMenu.addAction(QtGui.QIcon(":/plugins/layout_panel/icons/mActionSaveAsSVG.svg"), "Export as SVG")
            action = menu.exec_(self.listWidget.mapToGlobal(position))
            if action == removeAction: self.removeSelectedLayouts()
            elif action == openAction: self.openCurrentLayout()
            elif action == duplicateAction: self.duplicateLayout()
            elif action == renameAction: self.renameLayout()
            elif action == saveAsTemplateAction: self.saveAsTemplate()
            elif action == exportPDFAction: self.exportLayoutPDF()
            elif action == exportImageAction: self.exportLayoutImage()
            elif action == exportSvgAction: self.exportLayoutSvg()
            else:
                print("Code not found")

        else: #Context menu if multiple layouts are selected
            menu = QtWidgets.QMenu()
            removeAction = menu.addAction(QtGui.QIcon(":/plugins/layout_panel/icons/mActionDeleteSelected.svg"),"Remove Layouts...")
            duplicateAction = menu.addAction(QtGui.QIcon(":/plugins/layout_panel/icons/mActionDuplicateLayout.svg"),"Duplicate Layouts")
            menu.addSeparator()
            exportMenu = menu.addMenu("Export Layouts as...")
            exportPDFAction = exportMenu.addAction(QtGui.QIcon(":/plugins/layout_panel/icons/mActionSaveAsPDF.svg"), "Export as PDF")
            exportImageAction = exportMenu.addAction(QtGui.QIcon(":/plugins/layout_panel/icons/mActionSaveMapAsImage.svg"), "Export as Image")
            exportSvgAction = exportMenu.addAction(QtGui.QIcon(":/plugins/layout_panel/icons/mActionSaveAsSVG.svg"),"Export as SVG")
            action = menu.exec_(self.listWidget.mapToGlobal(position))
            if action == removeAction: self.removeSelectedLayouts()
            elif action == duplicateAction:self.duplicateLayout()
            elif action == exportPDFAction:self.exportLayoutPDF()
            elif action == exportImageAction: self.exportLayoutImage()
            elif action == exportSvgAction: self.exportLayoutSvg()
            else:
                print("Code not found")


    def openCurrentLayout(self): #Open currently selected layout in editor
        layout = self.projectLayoutManager.layoutByName(self.listWidget.selectedItems()[0].text())
        self.iface.openLayoutDesigner(layout)


    def exportLayoutPDF(self): #Export one or multiple layouts to PDF file
        default_extension = '.pdf'
        extension_filter = 'PDF files (*.pdf *.PDF)'
        default_filter = 'PDF files (*.pdf *.PDF)'

        lastLayoutExportDir=QgsSettings().value('APP/lastLayoutExportDir')
        if lastLayoutExportDir=="": lastUsedFolder = QDir(self.projectInstance.homePath())
        else: lastUsedFolder = QFileInfo(lastLayoutExportDir).dir()

        layoutList = []
        selectedLayouts = self.listWidget.selectedItems()
        if len(selectedLayouts)==0: #If nothing is selected, ask for destination folder and export all layouts
            for x in range(self.listWidget.count()):
                layoutList.append(self.projectLayoutManager.layoutByName(self.listWidget.item(x).text()))
            fname = QtWidgets.QFileDialog.getExistingDirectory(self, 'Choose folder to save multiple files',lastUsedFolder.path(),QtWidgets.QFileDialog.ShowDirsOnly)
        elif len(selectedLayouts) == 1:  #If nonly one layout is selected, ask file name and export layout
            layout = (self.projectLayoutManager.layoutByName(selectedLayouts[0].text()))
            layoutList.append(layout)
            fname = QtWidgets.QFileDialog.getSaveFileName(self, 'Choose a file name to save the layout as PDF', lastUsedFolder.filePath(layout.name() + default_extension), extension_filter,default_filter)
            if fname[0] == '': fname = None
        else: #Multiple selection, ask for destination folder and export selected layouts
            for layout in selectedLayouts:
                layoutList.append(self.projectLayoutManager.layoutByName(layout.text()))
            fname = QtWidgets.QFileDialog.getExistingDirectory(self, 'Choose folder to save multiple files',lastUsedFolder.path(),QtWidgets.QFileDialog.ShowDirsOnly)

        if fname:
            QgsSettings().setValue('APP/lastLayoutExportDir', fname[0])
            for layout in layoutList:
                export = QgsLayoutExporter(layout)
                if len(selectedLayouts) == 1: fileName = fname[0]
                else: fileName = QDir(fname).filePath(layout.name() + default_extension)
                export.exportToPdf(fileName, QgsLayoutExporter.PdfExportSettings())
                href = '''<a href="{0}">{1}</a>'''.format(QUrl.fromLocalFile(fileName).toString(),QDir.toNativeSeparators(fileName))
                self.iface.messageBar().pushSuccess('Export layout',' Successfully exported layout to ' + href)


    def exportLayoutImage(self): #Export one or multiple layouts to image file
        default_extension = '.png'
        extension_filter = 'PNG format (*.png *.PNG);;BMP format (*.bmp *.BMP);;CUR format (*.cur *.CUR);;ICNS format (*.icns *.ICNS);;ICO format (*.ico *.ICO)' \
                           'JPEG format (*.jpeg *.JPEG);;JPG format (*.jpg *.JPG);;PBM format (*.pbm *.PBM);;PGM format (*.pgm *.PGM);;PPM format (*.ppm *.PPM)' \
                           'TIF format (*.tif *.TIF);;TIFF format (*.tiff *.TIFF);;WBMP format (*.wbmp *.WBMP);;WEBP format (*.webp *.WEBP);;WBM format (*.wbm *.XBM);;XPM format (*.xpm *.XPM)'
        default_filter = 'PNG format (*.png *.PNG)'

        lastLayoutExportDir=QgsSettings().value('APP/lastLayoutExportDir')
        if lastLayoutExportDir=="": lastUsedFolder = QDir(self.projectInstance.homePath())
        else: lastUsedFolder = QFileInfo(lastLayoutExportDir).dir()

        layoutList = []
        selectedLayouts = self.listWidget.selectedItems()
        if len(selectedLayouts)==0: #If nothing is selected, ask for destination folder and export all layouts
            for x in range(self.listWidget.count()):
                layoutList.append(self.projectLayoutManager.layoutByName(self.listWidget.item(x).text()))
            fname = QtWidgets.QFileDialog.getExistingDirectory(self, 'Choose folder to save multiple files',lastUsedFolder.path(),QtWidgets.QFileDialog.ShowDirsOnly)
        elif len(selectedLayouts) == 1:  #If nonly one layout is selected, ask file name and export layout
            layout = (self.projectLayoutManager.layoutByName(selectedLayouts[0].text()))
            layoutList.append(layout)
            fname = QtWidgets.QFileDialog.getSaveFileName(self, 'Choose a file name to save the layout as image', lastUsedFolder.filePath(layout.name() + default_extension), extension_filter,default_filter)
            if fname[0] == '': fname = None
        else: #Multiple selection, ask for destination folder and export selected layouts
            for layout in selectedLayouts:
                layoutList.append(self.projectLayoutManager.layoutByName(layout.text()))
            fname = QtWidgets.QFileDialog.getExistingDirectory(self, 'Choose folder to save multiple files',lastUsedFolder.path(),QtWidgets.QFileDialog.ShowDirsOnly)

        if fname:
            QgsSettings().setValue('APP/lastLayoutExportDir', fname[0])
            for layout in layoutList:
                export = QgsLayoutExporter(layout)
                if len(selectedLayouts) == 1: fileName = fname[0]
                else: fileName = QDir(fname).filePath(layout.name() + default_extension)
                export.exportToImage(fileName, QgsLayoutExporter.ImageExportSettings())
                href = '''<a href="{0}">{1}</a>'''.format(QUrl.fromLocalFile(fileName).toString(),QDir.toNativeSeparators(fileName))
                self.iface.messageBar().pushSuccess('Export layout',' Successfully exported layout to ' + href)


    def exportLayoutSvg(self): #Export one or multiple layouts to SVG file
        default_extension = '.svg'
        extension_filter = 'SVG format (*.svg *.SVG)'
        default_filter = 'SVG format (*.svg *.SVG)'

        lastLayoutExportDir=QgsSettings().value('APP/lastLayoutExportDir')
        if lastLayoutExportDir=="": lastUsedFolder = QDir(self.projectInstance.homePath())
        else: lastUsedFolder = QFileInfo(lastLayoutExportDir).dir()

        layoutList = []
        selectedLayouts = self.listWidget.selectedItems()
        if len(selectedLayouts)==0: #If nothing is selected, ask for destination folder and export all layouts
            for x in range(self.listWidget.count()):
                layoutList.append(self.projectLayoutManager.layoutByName(self.listWidget.item(x).text()))
            fname = QtWidgets.QFileDialog.getExistingDirectory(self, 'Choose folder to save multiple files',lastUsedFolder.path(),QtWidgets.QFileDialog.ShowDirsOnly)
        elif len(selectedLayouts) == 1:  #If nonly one layout is selected, ask file name and export layout
            layout = (self.projectLayoutManager.layoutByName(selectedLayouts[0].text()))
            layoutList.append(layout)
            fname = QtWidgets.QFileDialog.getSaveFileName(self, 'Choose a file name to save the layout as SVG', lastUsedFolder.filePath(layout.name() + default_extension), extension_filter,default_filter)
            if fname[0]=='': fname = None
        else: #Multiple selection, ask for destination folder and export selected layouts
            for layout in selectedLayouts:
                layoutList.append(self.projectLayoutManager.layoutByName(layout.text()))
            fname = QtWidgets.QFileDialog.getExistingDirectory(self, 'Choose folder to save multiple files',lastUsedFolder.path(),QtWidgets.QFileDialog.ShowDirsOnly)

        if fname:
            QgsSettings().setValue('APP/lastLayoutExportDir', fname[0])
            for layout in layoutList:
                export = QgsLayoutExporter(layout)
                if len(selectedLayouts) == 1: fileName = fname[0]
                else: fileName = QDir(fname).filePath(layout.name() + default_extension)
                export.exportToSvg(fileName, QgsLayoutExporter.SvgExportSettings())
                href = '''<a href="{0}">{1}</a>'''.format(QUrl.fromLocalFile(fileName).toString(),QDir.toNativeSeparators(fileName))
                self.iface.messageBar().pushSuccess('Export layout',' Successfully exported layout to ' + href)


    def openLayoutEditor(self, item): # Open the selected layout in editor
        layout = self.projectLayoutManager.layoutByName(item.text())
        self.iface.openLayoutDesigner(layout)


    def createNewLayout(self): # Create a new blank layout
        iterator = 1
        while True:
            if self.projectLayoutManager.layoutByName('Layout ' + str(iterator)) is None :
                layout = QgsPrintLayout(self.projectInstance)
                layoutName = "Layout " + str(iterator)
                layout = QgsPrintLayout(self.projectInstance)
                layout.initializeDefaults()
                layout.setName(layoutName)
                self.projectLayoutManager.addLayout(layout)
                return
            iterator = iterator + 1


    def duplicateLayout(self): # Duplicate one or multiple selected layouts
        selectedItems = self.listWidget.selectedItems()
        listLayoutNames = []
        for layoutItem in selectedItems: listLayoutNames.append(layoutItem.text())
        for layoutName in listLayoutNames:
            iterator = 1
            while True:
                duplicateLayoutName = layoutName + ' copy ' + str(iterator)
                if self.projectLayoutManager.layoutByName(duplicateLayoutName) is None :
                    layout = self.projectLayoutManager.layoutByName(layoutName)
                    self.projectLayoutManager.duplicateLayout(layout, duplicateLayoutName)
                    return
                iterator = iterator + 1


    def renameLayout(self): # Open editor mode to rename currently selected layout
        self.layoutNameRename = self.listWidget.selectedItems()[0].text()
        self.listWidget.editItem(self.listWidget.selectedItems()[0])


    def renameLayoutClosedEditor(self, QListWidgetItem): # This function is called when editor mode is closed
        if self.projectLayoutManager.layoutByName(QListWidgetItem.text()) is None and QListWidgetItem.text() != "":
            if self.layoutNameRename != QListWidgetItem.text():
                layout = self.projectLayoutManager.layoutByName(self.layoutNameRename)
                layout.setName(QListWidgetItem.text())
        else:
            if self.layoutNameRename != QListWidgetItem.text():
                self.iface.messageBar().pushWarning('Failed to rename layout',' Entered layout name already exists or is invalid.')
        self.updateLayoutWidgetList()



    def removeSelectedLayouts(self): # Remove one or mutliple selected layouts
        selectedLayouts = self.listWidget.selectedItems()
        qm = QtWidgets.QMessageBox
        if len(selectedLayouts) == 0: return
        elif len(selectedLayouts)==1: ret = qm.question(self, 'Remove Selected Layout','Are you sure you want to remove permanently "{0}" ?'.format(selectedLayouts[0].text()),qm.Yes | qm.No)
        else: ret = qm.question(self, 'Remove Selected Layouts', "Are you sure you want to remove permanently {0} layouts?".format(len(selectedLayouts)), qm.Yes | qm.No)
        if ret == qm.Yes:
            listLayoutNames=[]
            for layout in selectedLayouts:
                listLayoutNames.append(layout.text())
            for layoutNames in listLayoutNames:
                self.projectLayoutManager.removeLayout(self.projectLayoutManager.layoutByName(layoutNames))

    def saveAsTemplate(self): #Save selected layout as template
        projectTemplateDir=QgsApplication.qgisSettingsDirPath()
        lastUsedFolder = QDir(projectTemplateDir)
        lastUsedFolder.cd('composer_templates')
        selectedLayouts = self.listWidget.selectedItems()
        layout = self.projectLayoutManager.layoutByName(selectedLayouts[0].text())
        fname = QtWidgets.QFileDialog.getSaveFileName(self, 'Choose a file name to save the layout as template',lastUsedFolder.filePath(layout.name() + '.qpt'),'Layout templates (*.qpt *.QPT)')
        if fname[0] != '':
            template=layout.saveAsTemplate(fname[0], QgsReadWriteContext())
            if template:
                href = '''<a href="{0}">{1}</a>'''.format(QUrl.fromLocalFile(fname[0]).toString(),QDir.toNativeSeparators(fname[0]))
                self.iface.messageBar().pushSuccess('Ave as Template', ' Successfully saved layout template to ' + href)



#TODO: change plugin icon
#TODO: Export as background task
#TODO: update statusbar
#TODO: translation TR
#TODO: Filter button? filter by size, page count, preset, etc.
#TODO: Add support for reports
#TODO: Support for drag & drop
#TODO: quick print layout?